class Atm:
    def __init__(self):
        # Initializes the ATM with a default PIN and balance, then immediately starts the menu.
        self.__pin = "1234" # __pin: store the user's PIN (default is "1234").
        self.__balance = 100000 # __balance: to store the user's account balance (default is 100000).
        self.__menu()  # Start the ATM menu immediately after the object is created.

    def __menu(self):
        # Displays the ATM menu options and processes user input in a continuous loop until the user decides to exit.
        while True:
            print("\nWelcome to JJ-ATM")
            print("1. Generate PIN")
            print("2. Change PIN")
            print("3. Check Balance")
            print("4. Withdraw")
            print("5. Deposit")
            print("6. Exit")

            choice = input("Choose a service: ")
            print(f"User chose: {choice}")

            if choice == '1':
                self.__generate_pin()  # generate a new PIN if the default PIN is still in place.
            elif choice == '2':
                self.__change_pin()  # change their PIN after verifying the current one.
            elif choice == '3':
                self.__check_balance()  # Displays current balance after successful PIN verification.
            elif choice == '4':
                self.__withdraw()  # withdraw funds ensuring the amount is valid and in multiples of 100.
            elif choice == '5':
                self.__deposit()  #  deposit funds ensuring the amount is valid and in multiples of 100.
            elif choice == '6':
                print("Thank you for using the JJ-ATM.")
                break
            else:
                
                print("Please try again.")

    def __get_pin(self):
        #  enter a 4-digit PIN and ensures that it's valid.
        #  checks that the PIN is exactly 4 digits and consists only of numbers.
        pin = input("Enter a 4-digit PIN: ")
        if len(pin) == 4 and pin.isdigit():
            return pin 
        else:
            print("Invalid PIN.") 
            return None  

    def __verify_pin(self):
        # Confirms that the entered PIN matches the stored PIN before allowing access to sensitive functions.
        # security check to ensure the user knows the current PIN before performing certain actions.
        print(f"Stored PIN: {self.__pin}")  
        pin = input("Enter your current PIN: ")
        if pin == self.__pin:
            return True  
        else:
            print("Incorrect PIN.")  
            return False  

    def __generate_pin(self):
        # Allows the user to generate a new PIN if the default PIN is still in place.
        if self.__pin != "1234":
            print("PIN is already set. Change PIN for a new one.")
            return

        pin = self.__get_pin()  # Prompt the user to enter a new PIN.
        if pin:
            confirm_pin = input("Confirm 4-digit PIN: ")  # confirm the new PIN.
            if pin == confirm_pin:
                self.__pin = pin  # Set the new PIN.
                print("PIN generated successfully.")
            else:
                print("PINs don't match. Please try again.") 

    def __change_pin(self):
        # Allows the user to change their PIN after verifying the current PIN.
        if not self.__verify_pin():   # This method requires the current PIN for authentication before allowing a PIN change.
            return  # Exit if PIN verification fails.

        new_pin = self.__get_pin()  # enter a new PIN.
        if new_pin:
            confirm_pin = input("Confirm new 4-digit PIN: ")  # confirm the new PIN.
            if new_pin == confirm_pin:
                self.__pin = new_pin  # Update to the new PIN.
                print("PIN changed successfully.")
            else:
                print("PINs don't match. Please try again.") 

    def __check_balance(self):
        if self.__verify_pin(): # This method provides security by requiring PIN verification before showing the balance.
            print(f"Your current balance is: ${self.__balance}")  # Display the balance.

    def __withdraw(self):
        # Allows the user to withdraw money after verifying the PIN.
        if not self.__verify_pin(): 
            return  

        try:
            amount = int(input("Enter amount to withdraw (multiples of 100): ")) # This method checks that the withdrawal amount is in multiples of 100 and does not exceed the balance.
            if amount % 100 == 0 and amount <= self.__balance:
                self.__balance -= amount  # Deduct the withdrawal amount from the balance.
                print(f"Withdrawal successful. Your new balance is: ${self.__balance}")
            else:
                print("Invalid amount.") 
        except ValueError:  # This method checks that the deposit amount is in multiples of 100.
            print("Please enter a valid amount.") 
    def __deposit(self):
        if not self.__verify_pin():  # Allows the user to deposit money after verifying the PIN.
            return 

        try:
            amount = int(input("Enter amount to deposit (multiples of 100): "))
            if amount % 100 == 0 and amount > 0:
                self.__balance += amount  # Add deposit amount to the balance.
                print(f"Deposit successful. Your new balance is: ${self.__balance}")
            else:
                print("Ensure a valid amount, multiple's of 100.") 
        except ValueError:
            print("Please enter a valid amount.")  

atm = Atm()  # This will automatically start the menu loop.
